<!doctype html>
<html lang="en">
<head>
  <title>Newswall</title>
  <!-- Always refresh every 12 hours to fix stuck displays and/or get new versions of this page -->
  <meta http-equiv="refresh" content="<%= 12 * 60 * 60 %>">
  <link rel="stylesheet" href="https://kit.fontawesome.com/a22be8527e.css" crossorigin="anonymous">
  <style>
    * {
      margin: 0;
    }
    .paper-container {
      height: <%=display.height%>px;
      width: <%=display.width%>px;
      border: 1px solid;
      overflow: hidden;
    }
    .paper-container img {
      height: 100%;
      width: 100%;
      object-fit: contain;
    }
    .statusbar {
      <% statusBarFontSize = 10 %>
      position: absolute;
      font-size: <%=statusBarFontSize%>px;
      font-family: serif;
      padding-left: <%=statusBarFontSize%>px;
      top: <%=display.height - 2*statusBarFontSize%>px;
    }
    .load-message {
      text-align: center;
      margin-top: <%=Math.ceil(display.height*40/100)%>px;
    }
  </style>
  <!--  TODO: https://github.com/browserify/browserify-->
  <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.4/dist/jquery.min.js"></script>
  <script src="https://polyfill.io/v3/polyfill.min.js?features=URLSearchParams,Promise"></script>
  <script>
    const params = new URLSearchParams(window.location.search)

    const timeFormat = (date) => {
      const h = date.getHours(), m = date.getMinutes()
      return `${(h % 12) || 12}:${m < 10 ? '0' + m : m} ${h < 12 ? 'AM' : 'PM'}`
    }

    // Update the DOM with new paper and status while also reporting current status with any prior error passed in
    update = (arg) => {
      // okular object is injected  by the display frame; we mock it otherwise in browser based emulations
      if (typeof okular === 'undefined') {
        random = (from, to) => from + Math.floor((to - from) * Math.random())
        okular = {
          <% if (!env.isProd) { %>
          RSSI: random(45, 85),
          BatteryLevel: random(5, 99),
          Temperature: random(-10, 35),
          <% } %>
          isMock: true
        }
      }
      const status = {
        uuid: okular.session_uuid || params.get('deviceId'),
        wifi: okular.RSSI ? Math.min(Math.max(2*(100 - okular.RSSI), 0), 100) : undefined, //See: https://stackoverflow.com/a/31852591/471136
        battery: okular.BatteryLevel,
        temperature: okular.Temperature,
        timeout: typeof okular['DevicesStatus'] == 'function' ? okular.GetReloadTimeout() : undefined,
        url: window.location.pathname,
        papers: params.has('papers') ? params.get('papers').split(',') : undefined,
        prev: params.get('prev') || $('.paper-container > img').attr('id'),
        isFrame: !okular.isMock,
        mode: typeof arg == 'function' ? 'PageLoad' : 'AJAX', // arg is either null (ajax) or a fn from document.ready
      }
      return $.post('/latest', status)
        .fail((jqXhr, textStatus, errorThrown) => status.error = {status: jqXhr.status, message: textStatus, error: errorThrown})
        .done(res => {
          try {
            status.refreshAfter = res.paper.displayFor * 60 * 1000

            let statusBar = ``
            if (status.refreshAfter)  statusBar += `${timeFormat(new Date(new Date().getTime() + status.refreshAfter))} <i class="fa-sharp fa-clock-rotate-left"></i>&emsp;`
            if (status.wifi)          statusBar += `${status.wifi}% <i class="fa-regular fa-signal-${Math.ceil(status.wifi * 6/100) - 1}"></i>&emsp;`
            if (status.battery)       statusBar += `${status.battery}% <i class="fa-regular fa-rotate-270 fa-battery-${Math.ceil(status.battery * 6/100) - 1}"></i>&emsp;`
            if (status.temperature)   statusBar += `${res.device && res.device.showFahrenheit ?`${Math.floor(1.8*status.temperature + 32)}° F` : `${status.temperature}° C`}&emsp;`

            $('.paper-container').html(`
              <img id="${res.paper.id}" src="/archive/${res.paper.date}/${res.paper.id}.png" style="transform: scale(${res.paper.scale})" alt="${res.paper.name} for ${res.paper.date}">
              <div class="statusbar">${statusBar}</div>
            `)
          } catch (error) { status.error = error }
        })
        .always(() => {
          setTimeout(update, status.refreshAfter || (1 * 60 * 1000))  // always update alteast 1 minute from now
          if (status.error) $('.statusbar').append(`<code>ERROR: ${JSON.stringify(status.error)}</code>`)
        })
    }

    $(document).ready(update)

  </script>
</head>
<body>
  <div class="paper-container">
    <div class="load-message">
      <h1>Fetching newspapers ...</h1>
      <i>If you see this for a while, check your device's internet connection or contact <a href="mailto:help@framed.news?subject=Something%20is%20wrong%20with%20frame&body=My%20frame%20is%20stuck%20displaying%20xxxx">help@framed.news</a></i>
      <div class="statusbar"></div>
    </div>
  </div>
</body>
</html>
